{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","components/PageNotFound/PageNotFound.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","initialState","status","error","isInitialized","setAppStatusAC","type","setAppErrorAC","handleServerNetworkError","dispatch","message","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","messages","length","catch","err","finally","console","warn","fetchTodolistsTC","todolists","todos","forEach","tl","setTasksAC","items","changeTodolistEntityStatusAC","todoId","entityStatus","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","map","style","paddingTop","Button","TodolistsList","useSelector","state","isLoggedIn","auth","useEffect","thunk","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","todolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","elevation","to","Alert","forwardRef","ref","ErrorSnackbar","app","handleClose","event","reason","setTimeout","Snackbar","open","autoHideDuration","onClose","severity","sx","width","setIsLoggedInAC","Login","navigate","useNavigate","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justifyContent","FormControl","FormLabel","href","target","handleSubmit","FormGroup","getFieldProps","margin","touched","FormControlLabel","control","PageNotFound","textAlign","App","statusLoading","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","component","flexGrow","LinearProgress","Container","fixed","path","element","top","CircularProgress","rootReducer","combineReducers","todoListId","copyState","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.309bf20f.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'cdcf9189-0a6c-4ea6-a766-22c26d9d1d3e'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha?: string,\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse< ResponseType<{userId: number}>>>(`auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{}>>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<MeResponseType>>(`auth/login`)\r\n    }\r\n}\r\n\r\n\r\n// types\r\n\r\ntype MeResponseType = {\r\n    \"id\": number,\r\n    \"login\": string,\r\n    \"email\": string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {NullableNull} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as NullableNull<string>,\r\n    isInitialized: false,\r\n}\r\ntype InitialStateType = typeof initialState\r\nexport const appReducer = (state: InitialStateType = initialState, action:\r\n    AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case \"APP/SET-ERROR\":\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-IS-INITIALIZED\":\r\n            return {...state, isInitialized: action.isInitialized}\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: NullableNull<string>) =>({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppIsInitializedAC = (isInitialized: boolean) =>({type: 'APP/SET-IS-INITIALIZED', isInitialized} as const)\r\n\r\nexport type SetAppErrorTypes = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppActionsTypes = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppIsInitializedTypes = ReturnType<typeof setAppIsInitializedAC>\r\nexport type AppActionsType = SetAppActionsTypes | SetAppErrorTypes | SetAppIsInitializedTypes","import {AppActionsType, setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch<AppActionsType>, message: string) => {\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(setAppStatusAC(\"failed\"))\r\n}\r\n\r\nexport const handleServerAppError = () => {\r\n\r\n}","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    SetAppActionsTypes,\r\n    setAppErrorAC,\r\n    SetAppErrorTypes,\r\n    SetAppIsInitializedTypes,\r\n    setAppStatusAC\r\n} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TasksActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<TasksActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC(tasks, todolistId)\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC(\"failed\"))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<TasksActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const action = removeTaskAC(taskId, todolistId)\r\n                dispatch(action)\r\n            } else {\r\n                dispatch(setAppErrorAC(res.data.messages.length ? res.data.messages[0] : \"Some error\"))\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC(\"failed\"))\r\n        })\r\n\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<TasksActionsType>) => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n            } else {\r\n                dispatch(setAppErrorAC(res.data.messages.length ? res.data.messages[0] : \"Some error\"))\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC(\"failed\"))\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<TasksActionsType>, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    dispatch(setAppErrorAC(res.data.messages.length ? res.data.messages[0] : \"Some error\"))\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC(\"failed\"))\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type TasksActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | SetAppActionsTypes\r\n    | SetAppErrorTypes\r\n    | SetAppIsInitializedTypes\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n    AppActionsType,\r\n    RequestStatusType,\r\n    SetAppActionsTypes,\r\n    setAppErrorAC,\r\n    SetAppErrorTypes,\r\n    setAppStatusAC\r\n} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {fetchTasksTC, TasksActionsType} from \"./tasks-reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistsActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            return state.map(tl => tl.id === action.todoId ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\n\r\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, TodolistsActionsType | TasksActionsType | AppActionsType>\r\nexport const fetchTodolistsTC = (): ThunkType => {\r\n    return (dispatch) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC(\"succeeded\"))\r\n                return res.data\r\n            })\r\n            .then((todos)=> {\r\n                todos.forEach((tl) => {\r\n                    dispatch(fetchTasksTC(tl.id))\r\n                })\r\n            })\r\n               }\r\n}\r\n\r\nexport const changeTodolistEntityStatusAC = (todoId: string, entityStatus: RequestStatusType) => {\r\n    return {\r\n        type: `CHANGE-TODOLIST-ENTITY-STATUS`,\r\n        todoId,\r\n        entityStatus,\r\n    } as const\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<TodolistsActionsType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, \"loading\"))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTodolistAC(todolistId))\r\n                    dispatch(changeTodolistEntityStatusAC(todolistId, \"succeeded\"))\r\n                } else {\r\n                    dispatch(setAppErrorAC(res.data.messages.length ? res.data.messages[0] : \"Some error\"))\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                dispatch(setAppErrorAC(err.message))\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC(\"idle\"))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<TodolistsActionsType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                } else {\r\n                    dispatch(setAppErrorAC(res.data.messages.length ? res.data.messages[0] : \"Some error\"))\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                dispatch(setAppErrorAC(err.message))\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC(\"idle\"))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<TodolistsActionsType>) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTodolistTitleAC(id, title))\r\n                } else {\r\n                    dispatch(setAppErrorAC(res.data.messages.length ? res.data.messages[0] : \"Some error\"))\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                dispatch(setAppErrorAC(err.message))\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC(\"idle\"))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type ChangeTodolistEntityStatusActionType = ReturnType<typeof changeTodolistEntityStatusAC>;\r\ntype TodolistsActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | SetAppActionsTypes\r\n    | SetAppErrorTypes\r\n    | ChangeTodolistEntityStatusActionType\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType,\r\n}\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.disabled}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\n\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    entityStatus: RequestStatusType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    // useEffect(() => {\r\n    //     const thunk = fetchTasksTC(props.id)\r\n    //     dispatch(thunk)е\r\n    // }, []) это можно вернуть если мы уберем диспатч тасок через forEach после запроса тудулистов\r\n    // (иначе запросы тасок и тудулистов выполняются в разном порядке\r\n    // и поэтому м.б. ситуация когда таски загрузились, а тудулисты нет\r\n    // а когда загрузяться тудулисты, то тасок уже небудет и появятся голые тудулисты)\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === \"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.entityStatus === \"loading\"}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { Navigate } from 'react-router-dom'\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    let isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if(!isLoggedIn) {\r\n            return\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    if(!isLoggedIn) {\r\n        return <Navigate to={\"login\"}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}} elevation={6}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                entityStatus = {tl.entityStatus}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React, { useState } from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport type NullableNull<T> = null | T\r\n\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>((state) => {\r\n        return state.app.error\r\n    })\r\n    const dispatch = useDispatch()\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            setTimeout(() => {\r\n                dispatch(setAppErrorAC(null))\r\n            }, 3000)\r\n        }\r\n    };\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}😠\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import {Dispatch} from 'redux'\r\nimport {AppActionsType, setAppErrorAC, setAppIsInitializedAC, setAppStatusAC} from\r\n        '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\nexport const authReducer = (state: InitialStateType = initialState, action:\r\n    ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n            } else {\r\n                dispatch(setAppErrorAC(res.data.messages.length ? res.data.messages[0] : \"Some error\"))\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n        .finally(() => dispatch(setAppStatusAC('succeeded')))\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n            } else {\r\n                dispatch(setAppErrorAC(res.data.messages.length ? res.data.messages[0] : \"Some error\"))\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n        .finally(() => dispatch(setAppStatusAC('succeeded')))\r\n}\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n        } else {\r\n            dispatch(setAppErrorAC(res.data.messages.length ? res.data.messages[0] : \"Some error\"))\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n        .finally(()=> {\r\n            dispatch(setAppIsInitializedAC(true))\r\n        })\r\n\r\n}\r\n\r\n\r\n// types\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | AppActionsType","import React, {useEffect} from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {fetchTodolistsTC} from \"../TodolistsList/todolists-reducer\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate, useNavigate} from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n\r\n    let isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n       useEffect(() => {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    }, [])\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'The password must be more than 3 characters';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            },\r\n    })\r\n\r\n   if (isLoggedIn) {\r\n       navigate(\"/\")\r\n   }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            {...formik.getFieldProps('email')}\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n\r\n                        <TextField\r\n                            {...formik.getFieldProps('password')}\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                checked={formik.values.rememberMe}\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />\r\n                            }/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n\r\n\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useEffect} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\n\r\nconst PageNotFound = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setAppStatusAC(\"succeeded\"))\r\n    }, [])\r\n    return (\r\n        <h1 style={{textAlign: \"center\"}}>404: PAGE NOT FOUND</h1>\r\n    );\r\n};\r\n\r\nexport default PageNotFound;","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {CircularProgress, LinearProgress} from \"@mui/material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Routes, Route, Navigate} from \"react-router-dom\";\r\nimport PageNotFound from \"../components/PageNotFound/PageNotFound\";\r\nimport {initializeAppTC, logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nfunction App() {\r\n    const statusLoading = useSelector<AppRootStateType, RequestStatusType>((state) => {\r\n        return state.app.status\r\n    })\r\n    const error = useSelector<AppRootStateType, string | null>((state) => {\r\n        return state.app.error\r\n    })\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => {\r\n        return state.app.isInitialized\r\n    })\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => {\r\n        return state.auth.isLoggedIn\r\n    })\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(()=> {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if(!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    };\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {statusLoading === \"loading\" && <LinearProgress color=\"secondary\"/>}\r\n            <Container fixed>\r\n\r\n                    <Routes>\r\n                        <Route path=\"/\" element={<TodolistsList/>}/>\r\n                        <Route path=\"login\" element={<Login/>}/>\r\n                        <Route path=\"/404\"  element={<PageNotFound/>}/>\r\n                        <Route path=\"*\"  element={<Navigate to={\"/404\"}/>}/> //если ничего не нашел в имеющихся роутах\r\n                    </Routes>\r\n\r\n            </Container>\r\n            {error !== null && <ErrorSnackbar/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// export const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <HashRouter>\n                <App/>\n            </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}