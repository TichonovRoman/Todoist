{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","components/PageNotFound/PageNotFound.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","slice","createSlice","name","initialState","status","error","isInitialized","reducers","setAppStatusAC","state","action","payload","setAppErrorAC","setAppIsInitializedAC","appReducer","reducer","actions","handleServerNetworkError","dispatch","message","removeTaskAC","tasks","index","findIndex","t","splice","addTaskAC","task","todoListId","unshift","updateTaskAC","setTasksAC","extraReducers","builder","addCase","addTodolistAC","todolist","removeTodolistAC","setTodolistsAC","todolists","forEach","tl","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","res","resultCode","messages","length","catch","err","finally","console","warn","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","map","changeTodolistEntityStatusAC","todoId","todolistsReducer","fetchTodolistsTC","todos","items","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","disabled","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","taskClassname","opacity","isChecked","style","Checkbox","Delete","Todolist","useDispatch","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","paddingTop","Button","TodolistsList","useSelector","isLoggedIn","auth","useEffect","thunk","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","elevation","to","Alert","forwardRef","ref","ErrorSnackbar","app","handleClose","event","reason","setTimeout","Snackbar","open","autoHideDuration","onClose","severity","sx","width","setIsLoggedInAC","authReducer","Login","navigate","useNavigate","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justifyContent","FormControl","FormLabel","href","target","handleSubmit","FormGroup","getFieldProps","margin","touched","type","FormControlLabel","control","PageNotFound","textAlign","App","statusLoading","className","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","component","flexGrow","LinearProgress","Container","fixed","path","element","top","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52296f57.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'cdcf9189-0a6c-4ea6-a766-22c26d9d1d3e'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha?: string,\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse< ResponseType<{userId: number}>>>(`auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{}>>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<MeResponseType>>(`auth/login`)\r\n    }\r\n}\r\n\r\n\r\n// types\r\n\r\ntype MeResponseType = {\r\n    \"id\": number,\r\n    \"login\": string,\r\n    \"email\": string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {NullableNull} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type initialStateType = {\r\n    status: RequestStatusType\r\n    error: NullableNull<string>,\r\n    isInitialized: boolean,\r\n}\r\n\r\n\r\nconst initialState: initialStateType = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as NullableNull<string>,\r\n    isInitialized: false,\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC: (state, action: PayloadAction<{status: RequestStatusType}> ) => {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC: (state, action: PayloadAction<{error: NullableNull<string>}> ) => {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppIsInitializedAC: (state, action: PayloadAction<{isInitialized: boolean}> ) => {\r\n            state.isInitialized = action.payload.isInitialized\r\n        },\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\n\r\n\r\n//\r\n// type InitialStateType = typeof initialState\r\n// export const appReducer = (state: InitialStateType = initialState, action:\r\n//     AppActionsType): InitialStateType => {\r\n//     switch (action.type) {\r\n//         case 'APP/SET-STATUS':\r\n//             return {...state, status: action.status}\r\n//         case \"APP/SET-ERROR\":\r\n//             return {...state, error: action.error}\r\n//         case \"APP/SET-IS-INITIALIZED\":\r\n//             return {...state, isInitialized: action.isInitialized}\r\n//\r\n//\r\n//         default:\r\n//             return state\r\n//     }\r\n// }\r\n\r\nexport const {setAppStatusAC, setAppErrorAC, setAppIsInitializedAC} = slice.actions\r\n\r\n//(status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\n// export const setAppErrorAC = slice.actions.setAppErrorAC // (error: NullableNull<string>) =>({type: 'APP/SET-ERROR', error} as const)\r\n// export const setAppIsInitializedAC = slice.actions.setAppIsInitializedAC // (isInitialized: boolean) =>({type: 'APP/SET-IS-INITIALIZED', isInitialized} as const)\r\n\r\nexport type SetAppErrorTypes = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppActionsTypes = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppIsInitializedTypes = ReturnType<typeof setAppIsInitializedAC>\r\nexport type AppActionsType = SetAppActionsTypes | SetAppErrorTypes | SetAppIsInitializedTypes","import {AppActionsType, setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerNetworkError = (dispatch: Dispatch<AppActionsType>, message: string) => {\r\n    dispatch(setAppErrorAC({error: message}))\r\n    dispatch(setAppStatusAC({status: \"failed\"}))\r\n}\r\n","import {\r\n    addTodolistAC,\r\n    AddTodolistActionType, removeTodolistAC,\r\n    RemoveTodolistActionType, setTodolistsAC,\r\n    SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    TodolistType,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    RequestStatusType,\r\n    SetAppActionsTypes,\r\n    setAppErrorAC,\r\n    SetAppErrorTypes,\r\n    SetAppIsInitializedTypes,\r\n    setAppStatusAC\r\n} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const slice = createSlice({\r\n    name: \"tasks\",\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC: (state, action: PayloadAction<{ taskId: string, todolistId: string }>) => {\r\n            // state[action.payload.todolistId].filter((t => t.id !== action.payload.taskId))\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        },\r\n        addTaskAC: (state, action: PayloadAction<{ task: TaskType }>) => {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n\r\n\r\n        },\r\n        updateTaskAC: (state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) => {\r\n            let tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC: (state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n    },\r\n\r\n    //добавляем общие редьюсеры из todolists-reducers:\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n\r\n})\r\nexport const asyncActions = slice.actions\r\n\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<TasksActionsType>) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC({tasks, todolistId})\r\n            dispatch(action)\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC({status: \"failed\"}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<TasksActionsType>) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const action = removeTaskAC({taskId, todolistId})\r\n                dispatch(action)\r\n            } else {\r\n                dispatch(setAppErrorAC({error: res.data.messages.length ? res.data.messages[0] : \"Some error\"}))\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC({status: \"failed\"}))\r\n        })\r\n\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<TasksActionsType>) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({task})\r\n                dispatch(action)\r\n            } else {\r\n                dispatch(setAppErrorAC({error: res.data.messages.length ? res.data.messages[0] : \"Some error\"}))\r\n            }\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            handleServerNetworkError(dispatch, err.message)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC({status: \"failed\"}))\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<TasksActionsType>, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId, todolistId, model: domainModel})\r\n                    dispatch(action)\r\n                } else {\r\n                    dispatch(setAppErrorAC({error: res.data.messages.length ? res.data.messages[0] : \"Some error\"}))\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(dispatch, err.message)\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC({status: \"failed\"}))\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type TasksActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    | SetAppActionsTypes\r\n    | SetAppErrorTypes\r\n    | SetAppIsInitializedTypes\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n    AppActionsType,\r\n    RequestStatusType,\r\n    SetAppActionsTypes,\r\n    setAppErrorAC,\r\n    SetAppErrorTypes,\r\n    setAppStatusAC\r\n} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {fetchTasksTC, TasksActionsType} from \"./tasks-reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\n\r\nconst slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: \"idle\"})\r\n\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ todoId: string, entityStatus: RequestStatusType }>) {\r\n            debugger\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoId)\r\n            state[index].entityStatus = action.payload.entityStatus\r\n        },\r\n    }\r\n})\r\n\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    removeTodolistAC,\r\n    addTodolistAC,\r\n    changeTodolistTitleAC,\r\n    changeTodolistFilterAC,\r\n    setTodolistsAC,\r\n    changeTodolistEntityStatusAC,\r\n} = slice.actions\r\n\r\n\r\ntype ThunkType = ThunkAction<void, AppRootStateType, unknown, TodolistsActionsType | TasksActionsType | AppActionsType>\r\nexport const fetchTodolistsTC = (): ThunkType => {\r\n    return (dispatch) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n                return res.data\r\n            })\r\n            .then((todos) => {\r\n                todos.forEach((tl) => {\r\n                    dispatch(fetchTasksTC(tl.id))\r\n                })\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //включаем прелоадер\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        //дизейблим кнопку удаления у этого тудулиста\r\n        dispatch(changeTodolistEntityStatusAC({todoId: todolistId, entityStatus: \"loading\"}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTodolistAC({id: todolistId}))\r\n                } else {\r\n                    dispatch(setAppErrorAC({error: res.data.messages.length ? res.data.messages[0] : \"Some error\"}))\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                debugger\r\n                dispatch(setAppErrorAC({error: err.message}))\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC({status: \"idle\"}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                } else {\r\n                    dispatch(setAppErrorAC({error: res.data.messages.length ? res.data.messages[0] : \"Some error\"}))\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                dispatch(setAppErrorAC({error: err.message}))\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC({status: \"idle\"}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTodolistTitleAC({id, title}))\r\n                } else {\r\n                    dispatch(setAppErrorAC({error: res.data.messages.length ? res.data.messages[0] : \"Some error\"}))\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                dispatch(setAppErrorAC({error: err.message}))\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC({status: \"idle\"}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type ChangeTodolistEntityStatusActionType = ReturnType<typeof changeTodolistEntityStatusAC>;\r\ntype TodolistsActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | SetAppActionsTypes\r\n    | SetAppErrorTypes\r\n    | ChangeTodolistEntityStatusActionType\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType,\r\n    entityStatus: RequestStatusType,\r\n}\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.disabled}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\n\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const taskClassname = props.task.status === TaskStatuses.Completed ? {opacity: \"0.5\"} : {};\r\n\r\n    const isChecked = props.task.status === TaskStatuses.Completed\r\n\r\n\r\n\r\n    return <div key={props.task.id}\r\n                style={taskClassname}>\r\n        <Checkbox\r\n            checked={isChecked}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    entityStatus: RequestStatusType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    // useEffect(() => {\r\n    //     const thunk = fetchTasksTC(props.id)\r\n    //     dispatch(thunk)е\r\n    // }, []) это можно вернуть если мы уберем диспатч тасок через forEach после запроса тудулистов\r\n    // (иначе запросы тасок и тудулистов выполняются в разном порядке\r\n    // и поэтому м.б. ситуация когда таски загрузились, а тудулисты нет\r\n    // а когда загрузяться тудулисты, то тасок уже небудет и появятся голые тудулисты)\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === \"loading\"}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.entityStatus === \"loading\"}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { Navigate } from 'react-router-dom'\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    let isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if(!isLoggedIn) {\r\n            return\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId,filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    if(!isLoggedIn) {\r\n        return <Navigate to={\"login\"}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}} elevation={6}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                entityStatus = {tl.entityStatus}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React, { useState } from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport type NullableNull<T> = null | T\r\n\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>((state) => {\r\n        return state.app.error\r\n    })\r\n    const dispatch = useDispatch()\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            setTimeout(() => {\r\n                dispatch(setAppErrorAC({error: null}))\r\n            }, 3000)\r\n        }\r\n    };\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}😠\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import {Dispatch} from 'redux'\r\nimport {setAppErrorAC, setAppIsInitializedAC, setAppStatusAC} from\r\n        '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\n//не нужны AC и их типизация, экшеныи их типизация. Не нужна типизация initialState\r\n// setIsLoggedInAC он же редьюсер он же как и АС.\r\n// не нужно писать case, default case\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\", //исходя из имени будет генерировать case самостоятельно\r\n    initialState: initialState,\r\n    reducers: { //как обьект\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}> ) {\r\n                      state.isLoggedIn = action.payload.value\r\n            // нужно передавать занчения через payload и затипизровать соответствующе, чтобы работало\r\n            // благодаря библиотеке immer.js можеи менять все с виду мутабельно, все происходит под капотом\r\n            // а не иммутабельно как того требует Redux [...state]\r\n                          // каждый case это маленький подредьюсер\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer //наш редьюсер\r\n\r\nconst {setIsLoggedInAC} = slice.actions //наши экшены\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n            } else {\r\n                dispatch(setAppErrorAC({error: res.data.messages.length ? res.data.messages[0] : \"Some error\"}))\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n        .finally(() => dispatch(setAppStatusAC({status: 'succeeded'})))\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n            } else {\r\n                dispatch(setAppErrorAC({error: res.data.messages.length ? res.data.messages[0] : \"Some error\"}))\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n        .finally(() => dispatch(setAppStatusAC({status: 'succeeded'})))\r\n}\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n        } else {\r\n            dispatch(setAppErrorAC({error: res.data.messages.length ? res.data.messages[0] : \"Some error\"}))\r\n        }\r\n    })\r\n        .catch((error) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n        .finally(()=> {\r\n            dispatch(setAppIsInitializedAC({isInitialized: true}))\r\n        })\r\n\r\n}","import React, {useEffect} from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {fetchTodolistsTC} from \"../TodolistsList/todolists-reducer\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate, useNavigate} from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n\r\n    let isLoggedIn = useSelector<AppRootStateType, boolean>(state => {\r\n\r\n        return state.auth.isLoggedIn\r\n    })\r\n\r\n       useEffect(() => {\r\n        dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n    }, [])\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'The password must be more than 3 characters';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            },\r\n    })\r\n\r\n   if (isLoggedIn) {\r\n\r\n       navigate(\"/\")\r\n   }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            {...formik.getFieldProps('email')}\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n\r\n                        <TextField\r\n                            {...formik.getFieldProps('password')}\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                checked={formik.values.rememberMe}\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />\r\n                            }/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n\r\n\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useEffect} from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\n\r\nconst PageNotFound = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n    }, [])\r\n    return (\r\n        <h1 style={{textAlign: \"center\"}}>404: PAGE NOT FOUND</h1>\r\n    );\r\n};\r\n\r\nexport default PageNotFound;","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {CircularProgress, LinearProgress} from \"@mui/material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Routes, Route, Navigate} from \"react-router-dom\";\r\nimport PageNotFound from \"../components/PageNotFound/PageNotFound\";\r\nimport {initializeAppTC, logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nfunction App() {\r\n    const statusLoading = useSelector<AppRootStateType, RequestStatusType>((state) => {\r\n        return state.app.status\r\n    })\r\n    const error = useSelector<AppRootStateType, string | null>((state) => {\r\n        return state.app.error\r\n    })\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => {\r\n        return state.app.isInitialized\r\n    })\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => {\r\n        return state.auth.isLoggedIn\r\n    })\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(()=> {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if(!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    };\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n            {statusLoading === \"loading\" && <LinearProgress color=\"secondary\"/>}\r\n            <Container fixed>\r\n\r\n                    <Routes>\r\n                        <Route path=\"/\" element={<TodolistsList/>}/>\r\n                        <Route path=\"login\" element={<Login/>}/>\r\n                        <Route path=\"/404\"  element={<PageNotFound/>}/>\r\n                        <Route path=\"*\"  element={<Navigate to={\"/404\"}/>}/> //если ничего не нашел в имеющихся роутах\r\n                    </Routes>\r\n\r\n            </Container>\r\n            {error !== null && <ErrorSnackbar/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n//вместо createStore теперь берем configureStore\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>getDefaultMiddleware().prepend(thunkMiddleware)\r\n    // к дефолтному мидлвеар добавляем (prepend- в началао) thunkMiddleware\r\n})\r\n\r\nexport type RootReducerType = typeof rootReducer;\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<RootReducerType>\r\n\r\n\r\n// export const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <HashRouter>\n                <App/>\n            </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}